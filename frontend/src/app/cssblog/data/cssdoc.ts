export const cssSelectors = [
  {
    selector: "*",
    desc: "The CSS universal selector (*) matches elements of any params.",
  },
  {
    selector: "#idname",
    desc: "The CSS ID selector matches an element based on the value of the element's id attribute.",
  },
  {
    selector: "[attr=value]",
    desc: "The CSS attribute selector matches elements based on the element having a given attribute explicitly set, with options for defining an attribute value or substring value match.",
  },
  {
    selector: ",",
    desc: "The CSS selector list (,) selects all the matching nodes. A selector list is a comma-separated list of selectors. When multiple selectors share the same declarations, they can be grouped together into a comma-separated list. Selector lists can also be passed as parameters to some funcal CSS pseudo-classes. White space may appear before and/or after the comma.",
  },
  {
    selector: " ",
    desc: "The descendant combinator — typically represented by a single space ( ) character — combines two selectors such that elements matched by the second selector are selected if they have an ancestor (parent, parent's parent, parent's parent's parent, etc.) element matching the first selector. Selectors that utilize a descendant combinator are called descendant selectors.",
  },
  {
    selector: "&gt;",
    desc: "is placed between two CSS selectors. It matches only those elements matched by the second selector that are the direct children of elements matched by the first. Descendant elements further down the hierarchy don't match. For example, to select only &lt;p&gt; elements that are direct children of &lt;article&gt; elements: &lt;code class='language-css'&gt;article &gt; p&lt;/code&gt;",
  },
  {
    selector: "+",
    desc: "The next-sibling combinator (+) is placed between two CSS selectors. It matches only those elements matched by the second selector that are the next sibling element of the first selector. For example, to select all &lt;img&gt; elements that are immediately preceded by a &lt;p&gt; element: &lt;code class='language-css'&gt;p + img&lt;/code&gt;",
  },
  {
    selector: "~",
    desc: "If you want to select siblings of an element even if they are not directly adjacent, then you can use the subsequent-sibling combinator (~). To select all &lt;img&gt; elements that come anywhere after &lt;p&gt; elements, we'd do this: &lt;code class='language-css'&gt;p ~ img&lt;/code&gt;",
  },
  {
    selector: "&",
    desc: "The CSS nesting module allows you to write nested rules that use combinators to create complex selectors. &lt;pre class='language-css'&gt;&lt;code&gt;p {&lt;/code&gt;&lt;code&gt;  ~ img {&lt;/code&gt;&lt;code&gt;  }&lt;/code&gt;&lt;code&gt;}&lt;/code&gt;&lt;code&gt;p {&lt;/code&gt;&lt;code&gt;  & img {&lt;/code&gt;&lt;code&gt;  }&lt;/code&gt;&lt;code&gt;}&lt;/code&gt;&lt;/pre&gt;",
  },
];

export const cssProperties = [
  {
    prop: "accent-color",
    desc: "sets the accent color for user-interface controls generated by some elements.",
    val: "auto, &lt;color&gt;"
  },
  {
    prop: "align-content",
    desc: "sets the distribution of space between and around content items along a flexbox's cross axis, or a grid or block-level element's block axis.",
    val: "normal, start, center, end, space-between, space-around, space-evenly, flex-start, flex-end, stretch, baseline, first baseline, last baseline, safe center, unsafe center"
  },
  {
    prop: "align-items",
    desc: "sets the align-self value on all direct children as a group. In flexbox, it controls the alignment of items on the cross axis. In grid layout, it controls the alignment of items on the block axis within their grid areas.",
    val: "normal, stretch, center, start, end, flex-start, flex-end, self-start, self-end, anchor-center, baseline, first baseline, last baseline, safe center, unsafe center"
  },
  {
    prop: "align-self",
    desc: "overrides a grid or flex item's align-items value. In grid, it aligns the item inside the grid area. In flexbox, it aligns the item on the cross axis.",
    val: "auto, normal, center, start, end, flex-start, flex-end, self-start, self-end, anchor-center, baseline, first baseline, last baseline, stretch, safe center, unsafe center"
  },
  {
    prop: "animation",
    desc: "applies an animation between styles.",
    val: "duration | easing-func | delay | name */"
  },
  {
    prop: "animation-composition",
    desc: "specifies the composite operation to use when multiple animations affect the same property simultaneously.",
    val: "replace, add, accumulate"
  },
  {
    prop: "animation-delay",
    desc: "specifies the amount of time to wait from applying the animation to an element before beginning to perform the animation.",
    val: "&lt;time&gt;"
  },
  {
    prop: "animation-direction",
    desc: "sets whether an animation should play forward, backward, or alternate back and forth between playing the sequence forward and backward.",
    val: "normal, reverse, alternate, alternate-reverse"
  },
  {
    prop: "animation-duration",
    desc: "sets the length of time that an animation takes to complete one cycle.",
    val: "auto, &lt;time&gt;"
  },
  {
    prop: "animation-fill-mode",
    desc: "sets how a CSS animation applies styles to its target before and after its execution.",
    val: "none, forwards, backwards, both"
  },
  {
    prop: "animation-iteration-count",
    desc: "sets the number of times an animation sequence should be played before stopping.",
    val: "infinite, &lt;number&gt;"
  },
  {
    prop: "animation-name",
    desc: "Specifies the names of one or more @keyframes at-rules that describe the animations to apply to an element. Multiple @keyframes names are comma-separated. If the name doesn't match any @keyframes, no animation is applied.",
    val: "none, &lt;custom-ident&gt;"
  },
  {
    prop: "animation-play-state",
    desc: "sets whether an animation is running or paused.",
    val: "running, paused"
  },
  {
    prop: "animation-range",
    desc: "set the start and end of an animation's attachment range along its timeline",
    val: "normal, &lt;length-percentage&gt;, &lt;timeline-range-name&gt;"
  },
  {
    prop: "animation-range-start",
    desc: "set the start of an animation's attachment range along its timeline",
    val: "normal, &lt;length-percentage&gt;, &lt;timeline-range-name&gt;"
  },
  {
    prop: "animation-range-end",
    desc: "set the end of an animation's attachment range along its timeline",
    val: "normal, &lt;length-percentage&gt;, &lt;timeline-range-name&gt;"
  },
  {
    prop: "animation-timing-func",
    desc: "sets how an animation progresses through the duration of each cycle.",
    val: "linear, ease, ease-in, ease-out, ease-in-out, step-start, step-end, linear(&lt;number&gt; &lt;percentage&gt;, ...), steps(&lt;integer&gt;, &lt;step-position&gt;), cubic-bezier(&lt;number [0,1]&gt;, &lt;number&gt;, &lt;number [0,1]&gt;, &lt;number&gt;)"
  },
  {
    prop: "aspect-ratio",
    desc: "define the desired width-to-height ratio of an element's box.",
    val: "auto, &lt;ratio&gt;"
  },
  {
    prop: "backdrop-filter",
    desc: "lets you apply graphical effects such as blurring or color shifting to the area behind an element.",
    val: "none, url(common-filters.svg#filter), blur(), brightness(), contrast(), drop-shadow(), grayscale(), hue-rotate(), invert(), opacity(), sepia(), saturate(), globa values"
  },
  {
    prop: "backface-visibility",
    desc: "sets whether the back face of an element is visible when turned towards the user.",
    val: "visible, hidden"
  },
  {
    prop: "background",
    desc: "sets all background style properties at once, component properties not set in the background shorthand property value declaration are set to their default values",
    val: "&lt;attachment&gt;, &lt;box&gt;, &lt;background-color&gt;, &lt;bg-image&gt;, &lt;position&gt;, &lt;repeat-style&gt;, &lt;bg-size&gt;"
  },
  {
    prop: "background-attachment",
    desc: "sets whether a background image's position is fixed within the viewport, or scrolls with its containing block.",
    val: "scroll, fixed, local"
  },
  {
    prop: "background-blend-mode",
    desc: "sets how an element's background images should blend with each other and with the element's background color.",
    val: "normal, multiply, screen, overlay, darken, lighten, color-dodge, color-burn, hard-light, soft-light, difference, exclusion, hue, saturation, color, luminosity"
  },
  {
    prop: "background-clip",
    desc: "sets whether an element's background extends underneath its border box, padding box, or content box.",
    val: "border-box, padding-box, content-box, text, border-area"
  },
  {
    prop: "background-image",
    desc: "sets one or more background images on an element.",
    val: "none, &lt;image&gt;"
  },
  {
    prop: "background-origin",
    desc: "sets the background's origin: from the border start, inside the border, or inside the padding.",
    val: "border-box, padding-box, content-box"
  },
  {
    prop: "background-position",
    desc: "sets the initial position (x,y) for each background image. The position is relative to the position layer set by background-origin.",
    val: "&lt;position&gt;, &lt;percentage&gt;, &lt;length&gt;, top, bottom, left, right, center, edge offsets values"
  },
  {
    prop: "background-repeat",
    desc: "sets how background images are repeated. A background image can be repeated along the horizontal and vertical axes, or not repeated at all.",
    val: "repeat, repeat-x, repeat-y, space, round, no-repeat"
  },
  {
    prop: "background-size",
    desc: "sets the size of the element's background image. The image can be left to its natural size, stretched, or constrained to fit the available space.",
    val: "auto, cover, contain, &lt;length&gt;, &lt;percentage&gt;"
  },
  {
    prop: "block-size",
    desc: "defines the horizontal or vertical size of an element's block, depending on its writing mode. It corresponds to either the width or the height property, depending on the value of writing-mode.",
    val: "&lt;length&gt;, &lt;percentage&gt;, max-content, min-content, fit-content, fit-content(), auto"
  },
  {
    prop: "border",
    desc: "sets an element's border. It sets the values of border-width, border-style, and border-color.",
    val: "&lt;line-width&gt;, &lt;line-style&gt;, &lt;color&gt;"
  },
  {
    prop: "border-block",
    desc: "sets the individual logical block border property values in a single place in the style sheet: border-block-color, border-block-style, border-block-width",
    val: "&lt;'border-width'&gt;, &lt;'border-style'&gt;, &lt;color&gt;"
  },
  {
    prop: "border-block-end",
    desc: "sets the individual logical block-end border property values in a single place in the style sheet: border-block-end-color, border-block-end-style, border-block-end-width",
    val: "&lt;'border-width'&gt;, &lt;'border-style'&gt;, &lt;color&gt;"
  },
  {
    prop: "border-block-start",
    desc: "sets the individual logical block-start border property values in a single place in the style sheet: border-block-start-color, border-block-start-style, border-block-start-width",
    val: "&lt;'border-width'&gt;, &lt;'border-style'&gt;, &lt;color&gt;"
  },
  {
    prop: "border-bottom",
    desc: "sets an element's bottom border. It sets the values of border-bottom-width, border-bottom-style and border-bottom-color.",
    val: "&lt;br-width&gt;, &lt;br-style&gt;, &lt;color&gt;"
  },
  {
    prop: "border-collapse",
    desc: "sets whether cells inside a &lt;table&gt; have shared or separate borders.",
    val: "collapse, separate"
  },
  {
    prop: "border-color",
    desc: "sets the color of an element's border. formats: top and bottom | left and right, top | left and right | bottom, top | right | bottom | left",
    val: " &lt;color&gt;"
  },
  {
    prop: "border-end-end-radius",
    desc: "defines a logical border radius on an element that maps to a physical border radius based on the writing-mode, direction, and text-orientation. It affects the corner between the block-end and inline-end sides, ensuring styles remain consistent across different text orientations and writing modes.",
    val: "&lt;length&gt;, &lt;length-percentage&gt;"
  },
  {
    prop: "border-end-start-radius",
    desc: "defines a logical border radius on an element, mapping to a physical border radius that depends on the writing-mode, direction, and text-orientation. It affects the corner between the block-end and inline-start sides, helping maintain consistent styling regardless of the text orientation or writing mode.",
    val: "&lt;length&gt;, &lt;length-percentage&gt;"
  },
  {
    prop: "border-start-end-radius",
    desc: "defines a logical border radius on an element, mapping to a physical border radius that depends on the writing-mode, direction, and text-orientation. It affects the corner between the block-start and inline-end sides, ensuring styles work consistently regardless of text orientation or writing mode.",
    val: "&lt;length&gt;, &lt;length-percentage&gt;"
  },
  {
    prop: "border-start-start-radius",
    desc: "defines a logical border radius on an element, mapping to a physical border radius based on writing-mode, direction, and text-orientation. It applies to the corner between the block-start and inline-start sides, ensuring styles work regardless of text orientation or writing mode.",
    val: "&lt;length&gt;, &lt;length-percentage&gt;"
  },
  {
    prop: "border-image",
    desc: "draws an image around a given element. It replaces the element's regular border.",
    val: "source | slice | width | outset | repeat"
  },
  {
    prop: "border-inline",
    desc: "sets the individual logical inline border property values in a single place in the style sheet. border-inline-width, border-inline-style, border-inline-color",
    val: "&lt;'border-width'&gt;, &lt;'border-style'&gt;, &lt;color&gt;"
  },
  {
    prop: "border-inline-end",
    desc: "a shorthand for the following CSS properties: border-inline-end-color, border-inline-end-style, border-inline-end-width",
    val: "&lt;'border-width'&gt;, &lt;'border-style'&gt;, &lt;color&gt;"
  },
  {
    prop: "border-inline-start",
    desc: "a shorthand for the following CSS properties: border-inline-start-color, border-inline-start-style, border-inline-start-width",
    val: "&lt;'border-width'&gt;, &lt;'border-style'&gt;, &lt;color&gt;"
  },
  {
    prop: "border-left",
    desc: "sets all the properties of an element's left border.",
    val: "&lt;br-width&gt;, &lt;br-style&gt;, &lt;color&gt;"
  },
  {
    prop: "border-radius",
    desc: "border-radius rounds the corners of an element's outer border edge, including the background. It consists of border-top-left-radius, border-top-right-radius, border-bottom-right-radius, and border-bottom-left-radius. The property affects the background as well, and it doesn't apply to table elements when border-collapse is set to collapse.",
    val: "&lt;length&gt;, &lt;percentage&gt;"
  },
  {
    prop: "border-right",
    desc: "sets all the properties of an element's right border: border-right-color, border-right-style, border-right-width",
    val: "&lt;br-width&gt;, &lt;br-style&gt;, &lt;color&gt;"
  },
  {
    prop: "border-spacing",
    desc: "sets the distance between the borders of adjacent cells in a &lt;table&gt;. This property applies only when border-collapse is separate.",
    val: "&lt;length&gt;"
  },
  {
    prop: "border-style",
    desc: "sets the line style for all four sides of an element's border.",
    val: "none, hidden, dotted, dashed, solid, double, groove, ridge, inset, outset"
  },
  {
    prop: "border-top",
    desc: "sets all the properties of an element's top border: border-top-color, border-top-style, border-top-width",
    val: "&lt;br-width&gt;, &lt;br-style&gt;, &lt;color&gt;"
  },
  {
    prop: "border-width",
    desc: "sets the width of an element's border.",
    val: "&lt;line-width&gt;, thin, medium, thick, &lt;length&gt;"
  },
  {
    prop: "bottom",
    desc: "participates in setting the vertical position of a positioned element. This inset property has no effect on non-positioned elements.",
    val: "auto, &lt;length&gt;, &lt;percentage&gt;"
  },
  {
    prop: "box-shadow",
    desc: "adds shadow effects around an element's frame. You can set multiple effects separated by commas. A box shadow is described by X and Y offsets relative to the element, blur and spread radius, and color.",
    val: "&lt;color&gt;, &lt;length&gt;, inset"
  },
  {
    prop: "box-sizing",
    desc: "sets how the total width and height of an element is calculated.",
    val: "content-box, border-box"
  },
  {
    prop: "break-after",
    desc: " sets how page, column, or region breaks should behave after a generated box. If there is no generated box, the property is ignored.",
    val: "auto, avoid, always, all, avoid-page, page, left, right, recto, verso, avoid column, column, avoid-region, region"
  },
  {
    prop: "break-before",
    desc: "sets how page, column, or region breaks should behave before a generated box. If there is no generated box, the property is ignored.",
    val: "auto, avoid, always, all, avoid-page, page, left, right, recto, verso, avoid column, column, avoid-region, region"
  },
  {
    prop: "break-inside",
    desc: "sets how page, column, or region breaks should behave inside a generated box. If there is no generated box, the property is ignored.",
    val: "auto, avoid, always, all, avoid-page, page, left, right, recto, verso, avoid column, column, avoid-region, region"
  },
  {
    prop: "caption-side",
    desc: "puts the content of a table's &lt;caption&gt; on the specified side. The values are relative to the writing-mode of the table.",
    val: "top, bottom"
  },
  {
    prop: "caret-color",
    desc: "sets the color of the insertion caret, the visible marker where the next character paramsd will be inserted. This is sometimes referred to as the text input cursor.",
    val: "auto, transparent, currentcolor, &lt;color&gt;"
  },
  {
    prop: "clear",
    desc: "sets whether an element must be moved below (cleared) floating elements that precede it. The clear property applies to floating and non-floating elements.",
    val: "none, left, right, both, inline-start, inline-end"
  },
  {
    prop: "clip-path",
    desc: "creates a clipping region that sets what part of an element should be shown. Parts that are inside the region are shown, while those outside are hidden.",
    val: "none, &lt;clip-source&gt;, &lt;geometry-box&gt;, &lt;basic-shape&gt;"
  },
  {
    prop: "clip-rule",
    desc: "defines how to determine which pixels in a mask's box are inside the clipping shape defined by a clip path, and which are outside, when parts of the path overlap other parts.",
    val: "nonzero, evenodd"
  },
  {
    prop: "color",
    desc: "sets the foreground color of an element's text and text decorations, and also sets the currentcolor value, which is used by other properties like border-color.",
    val: "currentcolor, &lt;named-color&gt;,  &lt;hex-color&gt;,  &lt;rgb()&gt;, &lt;rgba()&gt;, &lt;hsl()&gt;,  &lt;hwb()&gt;"
  },
  {
    prop: "color-scheme",
    desc: "allows an element to indicate which color schemes it can comfortably be rendered in, affecting canvas colors, scrollbar colors, form controls, and other browser-provided UI elements.",
    val: "normal, light, dark, only"
  },
  {
    prop: "column-fill",
    desc: "controls how an element's contents are balanced when broken into columns.",
    val: "auto, balanced"
  },
  {
    prop: "column-rule",
    desc: "sets the width, style, and color of the line drawn between columns in a multi-column layout.",
    val: "&lt;column-rule-width&gt;, &lt;column-rule-style&gt;, &lt;column-rule-color&gt;"
  },
  {
    prop: "column-span",
    desc: "makes it possible for an element to span across all columns when its value is set to all.",
    val: "none, all"
  },
  {
    prop: "columns",
    desc: "sets the number of columns and their widths when displaying an element's contents. Shorthand for column-count and column-width.",
    val: "auto, &lt;integer&gt;, &lt;length&gt;"
  },
  {
    prop: "contain",
    desc: "indicates that an element and its contents are, as much as possible, independent from the rest of the document tree.",
    val: "none, strict, content, size, inline-size, layout, style, paint"
  },
  {
    prop: "container",
    desc: "establishes an element as a query container and specifies the name and params of the containment context used in container queries. Shorthand for container-name and container-params.",
    val: "&lt;container-name&gt;, &lt;container-params&gt;"
  },
  {
    prop: "content",
    desc: "replaces content with a generated value, defining what is rendered inside an element or pseudo-element.",
    val: "normal, none, &lt;content-replacement&gt;, &lt;content-list&gt; &lt;string&gt;, &lt;image&gt;, &lt;counter&gt;, &lt;quote&gt;, &lt;target&gt;, &lt;leader()&gt;, attr(x)"
  },
  {
    prop: "content-visibility",
    desc: "controls whether an element is rendered and its contents are displayed. It forces strict containment, helping reduce unnecessary layout and rendering work until the element becomes visible or necessary.",
    val: "visible, hidden, auto"
  },
  {
    prop: "counter-increment",
    desc: "creates and initializes named CSS counters, allowing them to count up or down from a specified value.",
    val: "&lt;custom-ident&gt;, &lt;integer&gt;, none"
  },
  {
    prop: "counter-reset",
    desc: "creates named CSS counters and initializes them to a specific value. It supports creating counters that count up from one to the number of elements, as well as those that count down from the number of elements to one.",
    val: "&lt;custom-ident&gt;, &lt;integer&gt;, none"
  },
  {
    prop: "counter-set",
    desc: "sets CSS counters on the element to the given values.",
    val: "&lt;custom-ident&gt;, &lt;integer&gt;, none"
  },
  {
    prop: "cursor",
    desc: "sets the mouse cursor, if any, to show when the mouse pointer is over an element.",
    val: "&lt;url&gt;, &lt;x&gt;, &lt;y&gt;, keywords"
  },
  {
    prop: "cx",
    desc: "defines the x-axis center point of an SVG &lt;circle&gt; or &lt;ellipse&gt; element.",
    val: "&lt;length&gt;, &lt;percentage&gt;"
  },
  {
    prop: "cy",
    desc: "defines the y-axis center point of an SVG &lt;circle&gt; or &lt;ellipse&gt; element.",
    val: "&lt;length&gt;, &lt;percentage&gt;"
  },
  {
    prop: "display",
    desc: "defines whether an element is treated as a block or inline box and sets the layout structure for its children (e.g., flow layout, grid, or flex). It determines both the element's display params and how its children are laid out.",
    val: "block, inline, flow, flow-root, table, flex, grid, ruby, list-item, table-row-group, table-header-group, table-footer-group, table-row, table-cell, table-column-group, table-column, table-caption, ruby-base, ruby-text, ruby-base-container, ruby-text-container, contents, none, inline-block, inline-table, inline-flex, inline-grid"
  },
  {
    prop: "dominant-baseline",
    desc: "specifies the specific baseline used to align a box's text and inline-level content, as well as the default alignment baseline of boxes in the alignment context.",
    val: "auto, alphabetic, central, hanging, ideogrpahic, mathematical, middle, text-bottom, text-top"
  },
  {
    prop: "empty-cells",
    desc: "sets whether borders and backgrounds appear around &lt;table&gt; cells that have no visible content.",
    val: "show, hide"
  },
  {
    prop: "fill",
    desc: "defines how SVG text content and the interior canvas of SVG shapes are filled or painted.",
    val: "none, context-fill, context-stroke, &lt;color&gt;, &lt;url&gt;"
  },
  {
    prop: "fill-opacity",
    desc: "defines the opacity of the paint applied to SVG shapes or text content elements, affecting only the fill and not the stroke.",
    val: "&lt;number&gt;, &lt;percentage&gt;"
  },
  {
    prop: "fill-rule",
    desc: "defines the rule used to determine which parts of the SVG shape's canvas are included inside a shape to be filled.",
    val: "evenodd, nonzero"
  },
  {
    prop: "filter",
    desc: "applies graphical effects like blur or color shift to an element. Filters are commonly used to adjust the rendering of images, backgrounds, and borders.",
    val: "blur(), brightness(), contrast(), drop-shadow(), grayscale(), hue-rotate(), invert(), opacity(), saturate(), sepia(), url(), none"
  },
  {
    prop: "flex",
    desc: "sets how a flex item will grow or shrink to fit the space available in its flex container, includes flex-grow, flex-shrink, flex-basis.",
    val: "none, &lt;number&gt;, &lt;'width'&gt;, auto, context"
  },
  {
    prop: "flex-flow",
    desc: "specifies the direction of a flex container, as well as its wrapping behavior, includes flex-wrap, flex-direction.",
    val: "row, row-reverse, column, column-reverse, nowrap, wrap, wrap-reverse"
  },
  {
    prop: "float",
    desc: "places an element on the left or right side of its container, allowing text and inline elements to wrap around it. The element is removed from the normal document flow but remains a part of the layout.",
    val: "none, left, right, inline-start, inline-end"
  },
  {
    prop: "font",
    desc: "sets all the different properties of an element's font. Alternatively, it sets an element's font to a system font.",
    val: "font-family, font-size, font-stretch, font-style, font-variant, font-weight, line-height"
  },
  {
    prop: "font-kerning",
    desc: "sets the use of the kerning information stored in a font. Kerning defines how letters are spaced.",
    val: "auto, normal, none"
  },
  {
    prop: "font-optical-sizing",
    desc: "sets whether text rendering is optimized for viewing at different sizes.",
    val: "none, auto"
  },
  {
    prop: "font-palette",
    desc: "allows specifying one of the many palettes contained in a color font that a user agent may use for the font. Users can also override the values in a palette or create a new palette by using the @font-palette-values at-rule.",
    val: "normal, light, dark, &lt;palette-identifier&gt;, palette-mix()"
  },
  {
    prop: "font-synthesis",
    desc: "lets you control whether the browser synthesizes missing font styles (bold, italic, small-caps, subscript, superscript). It is a shorthand for font-synthesis-weight, font-synthesis-style, font-synthesis-small-caps, and font-synthesis-position.",
    val: "none, weight, style, position, small-caps"
  },
  {
    prop: "font-variant",
    desc: "allows you to set all the font variants for a font. shorthand for font-variant-alternates, font-variant-caps, font-variant-east-asian, font-variant-emoji, font-variant-ligatures, font-variant-numeric, font-variant-position",
    val: "normal, none, small-caps, common-ligatures"
  },
  {
    prop: "gap",
    desc: "sets the gaps (also called gutters) between rows and columns. This property applies to multi-column, flex, and grid containers. shorthand for column-gap, row-gap.",
    val: "normal, &lt;length&gt;, &lt;percentage&gt;"
  },
  {
    prop: "grid",
    desc: "that sets all of the explicit and implicit grid properties in a single declaration.",
    val: "none, grid-auto-columns, grid-auto-flow, grid-auto-rows, grid-template-areas, grid-template-columns, grid-template-rows"
  },
  {
    prop: "grid-area",
    desc: "specifies a grid item's size and location within a grid, contributing lines or spans to its grid placement. It is a shorthand for grid-row-start, grid-column-start, grid-row-end, and grid-column-end.",
    val: "auto, span, &lt;integer&gt;, &lt;custom-ident&gt;"
  },
  {
    prop: "grid-auto-flow",
    desc: "controls how the auto-placement algorithm works, specifying exactly how auto-placed items get flowed into the grid.",
    val: "row, column, dense"
  },
  {
    prop: "grid-columns",
    desc: "specifies a grid item's size and location within a grid column, contributing lines or spans to its grid placement. It is a shorthand for grid-column-start and grid-column-end.",
    val: "auto, span, &lt;integer&gt;, &lt;custom-ident&gt;"
  },
  {
    prop: "grid-rows",
    desc: "specifies a grid item's size and location within a grid row, contributing lines or spans to its grid placement. It is a shorthand for grid-row-start and grid-row-end.",
    val: "auto, span, &lt;integer&gt;, &lt;custom-ident&gt;"
  },
  {
    prop: "hyphenate-character",
    desc: "sets the character (or string) used at the end of a line before a hyphenation break.",
    val: "&lt;string&gt;, auto"
  },
  {
    prop: "hyphens",
    desc: "controls how words are hyphenated when text wraps. It can disable hyphenation, allow manual breaks, or let the browser insert hyphens automatically.",
    val: "none, manual, auto"
  },
  {
    prop: "image-orientation",
    desc: "specifies a layout-independent correction to the orientation of an image.",
    val: "none, from-image"
  },
  {
    prop: "image-rendering",
    desc: "sets an image scaling algorithm. The property applies to an element itself, to any images set in its other properties, and to its descendants.",
    val: "auto, smooth, high-quality, crisp-edges, pixelated"
  },
  {
    prop: "image-resolution",
    desc: "specifies the intrinsic resolution of all raster images used in or on the element.",
    val: "&lt;resolution&gt;, from-image, snap"
  },
  {
    prop: "inline-size",
    desc: "defines the horizontal or vertical size of an element's block, depending on its writing mode. It corresponds to either the width or the height property, depending on the value of writing-mode.",
    val: "&lt;length&gt;, &lt;percentage&gt;, max-content, min-content, fit-content, fit-content(), auto"
  },
  {
    prop: "inset",
    desc: "is a shorthand for top, right, bottom, and left, using the same multi-value syntax as the margin shorthand. It applies only to positioned elements.",
    val: "&lt;length&gt;, &lt;percentage&gt;, auto"
  },
  {
    prop: "inset-block",
    desc: "sets the logical block start and end offsets of an element, adapting to writing-mode, direction, and text-orientation. It maps to top and bottom in horizontal writing modes and affects only positioned elements.",
    val: "&lt;length&gt;, &lt;percentage&gt;, auto"
  },
  {
    prop: "inset-inline",
    desc: "sets the logical start and end offsets of an element in the inline direction, adapting to writing-mode, direction, and text-orientation. It maps to left and right in horizontal writing modes and affects only positioned elements.",
    val: "&lt;length&gt;, &lt;percentage&gt;, auto"
  },
  {
    prop: "isolation",
    desc: "determines whether an element must create a new stacking context.",
    val: "auto, isolate"
  },
  {
    prop: "justify-content",
    desc: "defines how the browser distributes space between and around content items along the main axis of a flex container and the inline axis of grid and multicol containers.",
    val: "center, start, end, flex-start, flex-end, left, right, normal, space-between, space-around, space-evenly, stretch, safe center, unsafe center"
  },
  {
    prop: "justify-items",
    desc: "defines the default justify-self for all items of the box, giving them all a default way of justifying each box along the appropriate axis.",
    val: "normal, stretch, center, start, end, flex-start, flex-end, self-start, self-end, left, right, anchor-center, baseline, first baseline, last baseline, safe center, unsafe center, legacy right, legacy left, legacy center"
  },
  {
    prop: "justify-self",
    desc: "sets the way a box is justified inside its alignment container along the appropriate axis.",
    val: "auto, normal, stretch, center, start, end, flex-start, flex-end, self-start, self-end, left, right, anchor-center, baseline first baseline, last baseline, safe center, unsafe center"
  },
  {
    prop: "left",
    desc: "specifies the horizontal position of a positioned element. This inset property has no effect on non-positioned elements.",
    val: "&lt;length&gt;, &lt;percentage&gt;, auto"
  },
  {
    prop: "letter-spacing",
    desc: "sets the horizontal spacing behavior between text characters. This value is added to the natural spacing between characters while rendering the text.",
    val: "normal, &lt;length&gt;"
  },
  {
    prop: "lighting-color",
    desc: "defines the color of the light source for the &lt;feDiffuseLighting&gt; and &lt;feSpecularLighting&gt; SVG lighting filter primitives within an SVG &lt;filter&gt;.",
    val: "&lt;color&gt;"
  },
  {
    prop: "line-break",
    desc: "sets how to break lines of Chinese, Japanese, or Korean (CJK) text when working with punctuation and symbols.",
    val: "auto, loose, normal, strict, anywhere"
  },
  {
    prop: "line-height",
    desc: "sets the height of a line box in horizontal writing modes. In vertical writing modes, it sets the width of a line box. It's commonly used to set the distance between lines of text.",
    val: "normal, unitless values, &lt;length&gt;, &lt;percentage&gt;"
  },
  {
    prop: "list-style",
    desc: "set all the list style properties at once. list-style-image, list-style-position, list-style-params.",
    val: "square, url(), inside, outside, none"
  },
  {
    prop: "margin",
    desc: "sets the margin area on all four sides of an element. margin-top, margin-right, margin-bottom, margin-left.",
    val: "&lt;length&gt;, &lt;percentage&gt;, auto"
  },
  {
    prop: "margin-block",
    desc: "defines the logical block start and end margins of an element, which maps to physical margins depending on the element's writing mode, directionality, and text orientation.",
    val: "&lt;length&gt;, &lt;percentage&gt;, auto"
  },
  {
    prop: "margin-inline",
    desc: "a shorthand property that defines both the logical inline start and end margins of an element, which maps to physical margins depending on the element's writing mode, directionality, and text orientation.",
    val: "&lt;length&gt;, &lt;percentage&gt;, auto"
  },
  {
    prop: "marker",
    desc: "specifies an SVG &lt;marker&gt; to be drawn at the first, middle, and last vertices of an element's path. The marker is defined with a &lt;url&gt; pointing to an SVG &lt;marker&gt; element. This property overrides marker-start, marker, and marker-end attributes in the SVG.",
    val: "none, url(markers.svg#arrow), &lt;marker-ref&gt;"
  },
  {
    prop: "mask",
    desc: "hides an element (partially or fully) by masking or clipping the image at specific points. shorthand for: mask-clip, mask-composite, mask-image, mask-mode, mask-origin, mask-position, mask-repeat mask-size",
    val: "none, &lt;mask-reference&gt;, &lt;masking-mode&gt;, &lt;position&gt;, &lt;bg-size&gt;, &lt;repeat-style&gt;, &lt;geometry-box&gt;, &lt;geometry-box&gt; | no-clip, &lt;compositing-operator&gt;"
  },
  {
    prop: "mask-image",
    desc: "sets the image that is used as mask layer for an element. By default this means the alpha channel of the mask image will be multiplied with the alpha channel of the element. This can be controlled with the mask-mode property.",
    val: "none, linear-gradient, image(url(), color)"
  },
  {
    prop: "mask-params",
    desc: "sets whether an SVG &lt;mask&gt; element is used as a luminance or an alpha mask. It applies to the &lt;mask&gt; element itself.",
    val: "luminance, alpha"
  },
  {
    prop: "math-style",
    desc: "indicates whether MathML equations should render with normal or compact height.",
    val: "normal, compact"
  },
  {
    prop: "max-block-size",
    desc: "sets the maximum size of an element in the block direction, based on the writing-mode. It acts as max-height for horizontal writing and max-width for vertical writing.",
    val: "&lt;length&gt;, &lt;percentage&gt;, none, max-content, min-content, fit-content, fit-content()"
  },
  {
    prop: "max-height",
    desc: "sets the maximum height of an element. enforces height &lt;= max-height",
    val: "&lt;length&gt;, &lt;percentage&gt;, none, max-content, min-content, fit-content, fit-content()"
  },
  {
    prop: "max-inline-size",
    desc: "defines the horizontal or vertical maximum size of an element's block, depending on its writing mode",
    val: "&lt;length&gt;, &lt;percentage&gt;, none, max-content, min-content, fit-content, fit-content()"
  },
  {
    prop: "max-width",
    desc: "sets the maximum width of an element. enforces width &lt;= max-width",
    val: "&lt;length&gt;, &lt;percentage&gt;, none, max-content, min-content, fit-content, fit-content()"
  },
  {
    prop: "min-block-size",
    desc: "defines the minimum horizontal or vertical size of an element's block, depending on its writing mode.",
    val: "&lt;length&gt;, &lt;percentage&gt;, none, max-content, min-content, fit-content, fit-content()"
  },
  {
    prop: "min-height",
    desc: "sets the minimum height of an element. enforces height &gt;= min-height",
    val: "&lt;length&gt;, &lt;percentage&gt;, none, max-content, min-content, fit-content, fit-content()"
  },
  {
    prop: "min-inline-size",
    desc: "defines the horizontal or vertical minimal size of an element's block, depending on its writing mode.",
    val: "&lt;length&gt;, &lt;percentage&gt;, none, max-content, min-content, fit-content, fit-content()"
  },
  {
    prop: "min-width",
    desc: "sets the minimum width of an element. enforces width &gt;= min-width",
    val: "&lt;length&gt;, &lt;percentage&gt;, none, max-content, min-content, fit-content, fit-content()"
  },
  {
    prop: "mix-blend-mode",
    desc: "sets how an element's content should blend with the content of the element's parent and the element's background.",
    val: "normal, multiply, screen, overlay, darken, lighten, color-dodge, color-burn, hard-light, soft-light, difference, exclusion, hue, saturation, color, luminosity, plus-darker, plus-lighter"
  },
  {
    prop: "object-fit",
    desc: "sets how the content of a replaced element, such as an &lt;img&gt; or &lt;video&gt;, should be resized to fit its container.",
    val: "contain, cover, fill, none, scale-down"
  },
  {
    prop: "object-position",
    desc: "specifies the alignment of the selected replaced element's contents within the element's box. Areas of the box which aren't covered by the replaced element's object will show the element's background.",
    val: "top, bottom, left, right, center, &lt;length&gt;, &lt;percentage&gt;, &lt;position&gt;"
  },
  {
    prop: "offset",
    desc: "shorthand that sets all properties needed to animate an element along a defined path: offset-anchor aligns a point on the element to the path. offset-position specifies the starting position. offset-path defines the path. offset-distance positions the element along the path. offset-rotate controls rotation along the path.",
    val: "normal, auto, reverse, &lt;length&gt;, &lt;percentage&gt;, &lt;position&gt;, left, center, right, top, &lt;length-percentage&gt; bottomray(), path(), url(), src()"
  },
  {
    prop: "opacity",
    desc: "sets the opacity of an element.",
    val: "&lt;alpha-value&gt;"
  },
  {
    prop: "order",
    desc: "sets the order to lay out an item in a flex or grid container.",
    val: "&lt;integer&gt;"
  },
  {
    prop: "orphan",
    desc: "sets the minimum number of lines in a block container that must be shown at the bottom of a page, region, or column.",
    val: "&lt;integer&gt;"
  },
  {
    prop: "outline",
    desc: "sets most of the outline properties in a single declaration. shorthand for: outline-width, outline-style, outline-color",
    val: "width, style, color"
  },
  {
    prop: "outline-offset",
    desc: "sets the amount of space between an outline and the edge or border of an element.",
    val: "&lt;length&gt;"
  },
  {
    prop: "overflow",
    desc: "sets the desired behavior when content does not fit in the element's padding box (overflows) in the horizontal and/or vertical direction. shorthand for: overflow-x, overflow-y",
    val: "visible, hidden, clip, scroll, auto"
  },
  {
    prop: "overscroll-behavior",
    desc: "sets what a browser does when reaching the boundary of a scrolling area. shorthand for: overscroll-behavior-x, overscroll-behavior-y",
    val: "auto, contain, none"
  },
  {
    prop: "overscroll-behavior-block",
    desc: "sets the browser's behavior when the block direction boundary of a scrolling area is reached.",
    val: "auto, contain, none"
  },
  {
    prop: "overscroll-behavior-inline",
    desc: "sets the browser's behavior when the inline direction boundary of a scrolling area is reached.",
    val: "auto, contain, none"
  },
  {
    prop: "padding",
    desc: "sets the padding area on all four sides of an element at once. shorthand for padding-top, padding-right, padding-bottom, padding-left",
    val: "&lt;length&gt;, &lt;percentage&gt;"
  },
  {
    prop: "padding-block",
    desc: "defines the logical block start and end padding of an element, which maps to physical padding properties depending on the element's writing mode, directionality, and text orientation.",
    val: "&lt;length&gt;, &lt;percentage&gt;"
  },
  {
    prop: "padding-inline",
    desc: "defines the logical inline start and end padding of an element, which maps to physical padding properties depending on the element's writing mode, directionality, and text orientation.",
    val: "&lt;length&gt;, &lt;percentage&gt;"
  },
  {
    prop: "perspective",
    desc: "determines the distance between the z=0 plane and the user in order to give a 3D-positioned element some perspective.",
    val: "none, &lt;length&gt;"
  },
  {
    prop: "perspective-origin",
    desc: "determines the position at which the viewer is looking. It is used as the vanishing point by the perspective property.",
    val: "x-position: &lt;length-percentage&gt;, left, center, right y-position: &lt;length-percentage&gt;, top, center, botto"
  },
  {
    prop: "place-content",
    desc: "allows you to align content along both the block and inline directions at once (i.e. the align-content and justify-content properties) in a relevant layout system such as Grid or Flexbox.",
    val: "start, end, flex-start, flex-end, center, left, right, baseline, first baseline, last baseline, space-evenly, space-between, space-around, stretch, safe, unsafe"
  },
  {
    prop: "place-items",
    desc: "aligns items along both the block and inline directions at once. It sets the values of the align-items and justify-items properties. If the second value is not set, the first value is also used for it.",
    val: "start, end, flex-start, flex-end, center, left, right, baseline, first baseline, last baseline, space-evenly, space-between, space-around, stretch, safe, unsafe, legacy, normal, self-start, self-end, anchor-center"
  },
  {
    prop: "place-self",
    desc: "aligns an individual item in both block and inline directions (combining align-self and justify-self). It applies to block-level boxes, absolutely positioned boxes, and grid items. If a second value is omitted, the first value is used for both.",
    val: "start, end, flex-start, flex-end, center, left, right, baseline, first baseline, last baseline, space-evenly, space-between, space-around, stretch, safe, unsafe, auto, normal, self-start, self-end, anchor-center"
  },
  {
    prop: "pointer-events",
    desc: "sets under what circumstances (if any) a particular graphic element can become the target of pointer events.",
    val: "auto, none SVG only: visiblePainted, visibleFill, visibleStroke, visible, painted, fill, stroke, bounding-box, all"
  },
  {
    prop: "position",
    desc: "sets how an element is positioned in a document. The top, right, bottom, and left properties determine the final location of positioned elements.",
    val: "static, relative, absolute, fixed, sticky"
  },
  {
    prop: "quote",
    desc: "defines how browsers render quotation marks for the &lt;q&gt; element or when using open-quotes, close-quotes, no-open-quote, and no-close-quote values in the content property.",
    val: "none, auto, &lt;string&gt;"
  },
  {
    prop: "r",
    desc: "defines the radius of a circle. It can only be used with the SVG &lt;circle&gt; element. If present, it overrides the circle's r attribute.",
    val: ""
  },
  {
    prop: "resize",
    desc: "sets whether an element is resizable, and if so, in which directions.",
    val: "none, both, horizontal, vertical, block, inline"
  },
  {
    prop: "right",
    desc: "participates in specifying the horizontal position of a positioned element. This inset property has no effect on non-positioned elements.",
    val: "&lt;length&gt;, &lt;percentage&gt;, auto"
  },
  {
    prop: "rotate",
    desc: "allows you to specify rotation transforms individually and independently of the transform property.",
    val: "none, &lt;angle&gt;, x, y, z, vector &lt;number&gt;"
  },
  {
    prop: "ruby-align",
    desc: "defines the distribution of the different ruby elements over the base.",
    val: "start, center, space-between, space-around"
  },
  {
    prop: "ruby-position",
    desc: "defines the position of a ruby element relative to its base element. It can be positioned over the element (over), under it (under), or between the characters on their right side (inter-character).",
    val: "over, under, alternate, inter-character"
  },
  {
    prop: "rx",
    desc: "defines the x-axis, or horizontal, radius of an SVG &lt;ellipse&gt; and the horizontal curve of the corners of an SVG &lt;rect&gt; rectangle. If present, it overrides the shape's rx attribute.",
    val: "&lt;length&gt;, &lt;percentage&gt;, auto"
  },
  {
    prop: "ry",
    desc: "defines the y-axis, or vertical, radius of an SVG &lt;ellipse&gt; and the vertical curve of the corners of an SVG &lt;rect&gt; rectangle. If present, it overrides the shape's ry attribute.",
    val: "&lt;length&gt;, &lt;percentage&gt;, auto"
  },
  {
    prop: "scale",
    desc: "allows you to specify scale transforms individually and independently of the transform property.",
    val: "none, &lt;number&gt;, &lt;percentage&gt;"
  },
  {
    prop: "scroll-behavior",
    desc: "sets the behavior for a scrolling box when scrolling is triggered by the navigation or CSSOM scrolling APIs.",
    val: "auto, smooth"
  },
  {
    prop: "scroll-margin",
    desc: "sets all of the scroll margins of an element at once, assigning values much like the margin property does for margins of an element.",
    val: "&lt;length&gt;"
  },
  {
    prop: "scroll-margin-block",
    desc: "sets the scroll margins of an element in the block dimension.",
    val: "&lt;length&gt;"
  },
  {
    prop: "scroll-margin-inline",
    desc: "sets the scroll margins of an element in the inline dimension.",
    val: "&lt;length&gt;"
  },
  {
    prop: "scroll-padding",
    desc: "sets scroll padding on all sides of an element at once, much like the padding property does for padding on an element.",
    val: "auto, &lt;length&gt;"
  },
  {
    prop: "scroll-padding-block",
    desc: "sets the scroll padding of an element in the block dimension.",
    val: "auto, &lt;length&gt;"
  },
  {
    prop: "scroll-padding-inline",
    desc: "sets the scroll padding of an element in the inline dimension.",
    val: "auto, &lt;length&gt;"
  },
  {
    prop: "scroll-snap-align",
    desc: "specifies the box's snap position as an alignment of its snap area (as the alignment subject) within its snap container's snap port (as the alignment container).",
    val: "none, center, start, end"
  },
  {
    prop: "scroll-snap-params",
    desc: "set on a scroll container, opting it into scroll snapping by setting the direction and strictness of snap point enforcement within the snap port.",
    val: "none, x, y, block, inline, both, mandatory, proximity"
  },
  {
    prop: "scrollbar-color",
    desc: "sets the color of the scrollbar track and thumb. The track refers to the background of the scrollbar, which is generally fixed regardless of the scrolling position. The thumb refers to the moving part of the scrollbar, which usually floats on top of the track.",
    val: "auto, &lt;color&gt;"
  },
  {
    prop: "scrollbar-gutter",
    desc: "reserves space for scrollbars, preventing layout changes as content grows while avoiding unnecessary visual clutter. Browsers choose between classic (gutter) and overlay scrollbars, which appear over the content.",
    val: "auto, stable, both-edges"
  },
  {
    prop: "scrollbar-width",
    desc: "allows the author to set the desired thickness of an element's scrollbars when they are shown.",
    val: "auto, thin, none"
  },
  {
    prop: "shape-margin",
    desc: "sets a margin for a CSS shape created using shape-outside.",
    val: "&lt;length&gt;, &lt;percentage&gt;"
  },
  {
    prop: "shape-outside",
    desc: "defines a shape—which may be non-rectangular—around which adjacent inline content should wrap. By default, inline content wraps around its margin box; shape-outside provides a way to customize this wrapping, making it possible to wrap text around complex objects rather than rectangular boxes.",
    val: "none, margin-box, content-box, border-box, padding-box, circle(), ellipse(), inset(), polygon() url(), linear-gradient(),&lt;shape-box&gt;, &lt;basic-shape&gt;, &lt;image&gt;"
  },
  {
    prop: "shape-rendering",
    desc: "provides hints to the renderer about tradeoffs when rendering shapes like &lt;circle&gt;, &lt;ellipse&gt;, &lt;line&gt;, &lt;path&gt;, &lt;polygon&gt;, &lt;polyline&gt;, and &lt;rect&gt;. The browser uses these hints to balance factors like anti-aliasing, subpixel positioning, and optimization techniques to determine how to render these shapes efficiently. It applies only to these elements and overrides the shape-rendering attribute if declared.",
    val: "&lt;number&gt;, &lt;percentage&gt;, auto, crispEdges, geometricPrecision, optimizeSpeed"
  },
  {
    prop: "tab-size",
    desc: "used to customize the width of tab characters (U+0009).",
    val: "&lt;number&gt;, &lt;length&gt;"
  },
  {
    prop: "table-layout",
    desc: "sets the algorithm used to lay out &lt;table&gt; cells, rows, and columns.",
    val: "auto, fixed"
  },
  {
    prop: "text-align",
    desc: "sets the horizontal alignment of the inline-level content inside a block element or table-cell box. This means it works like vertical-align but in the horizontal direction.",
    val: "start, end, left, right, center, justify, match-parent, -moz-center, -webkit-center"
  },
  {
    prop: "text-anchor",
    desc: "aligns a box containing a string of text where the wrapping area is determined from the inline-size property, and the text is then placed relative to the anchor point of the element, which is defined using the x and y (or dx and dy) attributes.",
    val: "start, middle, end"
  },
  {
    prop: "text-decoration",
    desc: "sets the appearance of decorative lines on text. It is a shorthand for text-decoration-line, text-decoration-color, text-decoration-style, and the newer text-decoration-thickness property.",
    val: "underline, line-through, overline, blink, none, &lt;color&gt;, solid, double, dotted, wavy, dashed, &lt;length&gt;"
  },
  {
    prop: "text-emphasis",
    desc: "applies emphasis marks to text (except spaces and control characters). It is a shorthand for text-emphasis-style and text-emphasis-color.",
    val: "none, filled, open, dot, circle, double-circle, triangle, sesame, &lt;string&gt;, &lt;color&gt;"
  },
  {
    prop: "text-indent",
    desc: "sets the length of empty space (indentation) that is put before lines of text in a block.",
    val: "&lt;length&gt;, &lt;percentage&gt;, each-line, hanging"
  },
  {
    prop: "text-orientation",
    desc: "sets the orientation of the text characters in a line. It only affects text in vertical mode (when writing-mode is not horizontal-tb). It is useful for controlling the display of languages that use vertical script, and also for making vertical table headers.",
    val: "mixed, upright, sideways-right, sideways, use-glyph-orientation"
  },
  {
    prop: "text-overflow",
    desc: "sets how hidden overflow content is signaled to users. It can be clipped, display an ellipsis (…), or display a custom string.",
    val: "clip, ellipsis, &lt;string&gt;"
  },
  {
    prop: "text-rendering",
    desc: "provides information to the rendering engine about what to optimize for when rendering text. The browser makes trade-offs among speed, legibility, and geometric precision.",
    val: "auto, optimizeSpeed, optimizeLegibility, geometricPrecision"
  },
  {
    prop: "text-shadow",
    desc: "adds shadows to text. It accepts a comma-separated list of shadows to be applied to the text and any of its decorations. Each shadow is described by some combination of X and Y offsets from the element, blur radius, and color.",
    val: "&lt;color&gt;, &lt;offset-x&gt;, &lt;offset-y&gt;, &lt;blur-radius&gt;"
  },
  {
    prop: "text-transform",
    desc: "specifies how to capitalize an element's text. It can be used to make text appear in all-uppercase or all-lowercase, or with each word capitalized. It also can help improve legibility for ruby.",
    val: "none, capitalize, uppercase, lowercase, full-width, full-size-kana, math-auto"
  },
  {
    prop: "text-wrap",
    desc: "controls how text inside an element is wrapped. The different values provide: Typographic improvements, for example more balanced line lengths across broken headings A way to turn text wrapping off completely.",
    val: "wrap, nowrap, balance, pretty, stable"
  },
  {
    prop: "top",
    desc: "sets the vertical position of a positioned element. This inset property has no effect on non-positioned elements.",
    val: "&lt;length&gt;, &lt;percentage&gt;, auto"
  },
  {
    prop: "touch-action",
    desc: "sets how an element's region can be manipulated by a touchscreen user (for example, by zooming features built into the browser), panning (scrolling), pinching.",
    val: "auto, none, pan-x, pan-left, pan-right, pan-y, pan-up, pan-down, pinch-zoom, manipulation"
  },
  {
    prop: "transform",
    desc: "lets you rotate, scale, skew, or translate an element. It modifies the coordinate space of the CSS visual formatting model.",
    val: "none, &lt;transform-func&gt;"
  },
  {
    prop: "transform-box",
    desc: "defines the layout box to which the transform, individual transform properties translate, scale, and rotate, and transform-origin properties relate.",
    val: "content-box, border-box, fill-box, stroke-box, view-box"
  },
  {
    prop: "transform-origin",
    desc: "sets the origin for an element's transformations.",
    val: "center, top, left, right, bottom, &lt;length&gt;, &lt;percentage&gt;"
  },
  {
    prop: "transform-style",
    desc: "sets whether children of an element are positioned in the 3D space or are flattened in the plane of the element.",
    val: "flat, preserve-3d"
  },
  {
    prop: "transition",
    desc: "shorthand property for transition-property, transition-duration, transition-timing-func, transition-delay, and transition-behavior.",
    val: "property name | duration, property name | duration | delay, property name | duration | easing func, property name | duration | easing func | delay, property name | duration | behavior, all"
  },
  {
    prop: "translate",
    desc: "allows you to apply translation transforms independently, simplifying UI usage and avoiding the need to remember transform func order in the transform property.",
    val: "none, &lt;length&gt;, &lt;percentage&gt;"
  },
  {
    prop: "user-select",
    desc: "controls whether the user can select text. This doesn't have any effect on content loaded as part of a browser's user interface (its chrome), except in textboxes.",
    val: "none, auto, text, all"
  },
  {
    prop: "vector-effect",
    desc: "suppresses specific transformation effects in SVG, allowing features like map roads or diagram keys to maintain consistent size and position. It applies only to SVG elements that accept the vector-effect attribute and overrides any values set by the attribute.",
    val: "none, non-scaling-stroke, non-scaling-size, non-rotation, fixed-position"
  },
  {
    prop: "vertical-align",
    desc: "sets vertical alignment of an inline, inline-block or table-cell box.",
    val: "baseline, sub, super, text-top, text-bottom, middle, top, bottom, &lt;length&gt;, &lt;percentage&gt;"
  },
  {
    prop: "visibility",
    desc: "shows or hides an element without changing the layout of a document. The property can also hide rows or columns in a &lt;table&gt;",
    val: "visible, hidden, collapse"
  },
  {
    prop: "white-space",
    desc: "sets how white space inside an element is handled.",
    val: "normal, nowrap, pre, pre-wrap, pre-line, break-spaces, wrap, collapse, balance, preserve, remove, hang"
  },
  {
    prop: "white-space-collapse",
    desc: "controls how white space inside an element is collapsed.",
    val: "collapse, preserve, preserve-breaks, preserve-spaces, break-spaces"
  },
  {
    prop: "width",
    desc: "sets an element's width. By default, it sets the width of the content area, but if box-sizing is set to border-box, it sets the width of the border area.",
    val: "&lt;length&gt;, &lt;percentage&gt; max-content, min-content, fit-content, fit-content(), auto, stretch"
  },
  {
    prop: "word-break",
    desc: "sets whether line breaks appear wherever the text would otherwise overflow its content box.",
    val: "normal, break-all, keep-all, auto-phrase, break-word"
  },
  {
    prop: "word-spacing",
    desc: "sets the length of space between words and between tags.",
    val: "normal, &lt;length&gt;"
  },
  {
    prop: "word-wrap",
    desc: "applies to text, setting whether the browser should insert line breaks within an otherwise unbreakable string to prevent text from overflowing its line box.",
    val: "normal, break-word, anywhere"
  },
  {
    prop: "writing-mode",
    desc: "sets text layout horizontal or vertical, and the direction blocks progress. Typically applied to the root element.",
    val: "horizontal-tb, vertical-rl, vertical-lr"
  },
  {
    prop: "x",
    desc: "defines the x-axis position of SVG elements like &lt;rect&gt;, &lt;image&gt;, &lt;foreignObject&gt; and nested &lt;svg&gt; viewports, relative to their nearest &lt;svg&gt; ancestor's coordinate system.",
    val: "&lt;length&gt;, &lt;percentage&gt;"
  },
  {
    prop: "y",
    desc: "defines the y-axis position of SVG elements like &lt;rect&gt;, &lt;image&gt;, &lt;foreignObject&gt; and nested &lt;svg&gt; viewports, relative to their nearest &lt;svg&gt; ancestor's coordinate system.",
    val: "&lt;length&gt;, &lt;percentage&gt;"
  },
  {
    prop: "z-index",
    desc: "sets the z-order of a positioned element and its descendants or flex and grid items. Overlapping elements with a larger z-index cover those with a smaller one.",
    val: "auto, &lt;integer&gt;"
  },
  {
    prop: "zoom",
    desc: "control the magnification level of an element. transform: scale() can be used as an alternative to this property.",
    val: "&lt;percentage&gt;, &lt;number&gt;, normal, reset,"
  }
];

export const pseudoClasses = [
  {
    selector: ":active",
    desc: "represents an element (such as a button) that is being activated by the user."
  },
  {
    selector: ":any-link",
    desc: "selector represents an element that acts as the source anchor of a hyperlink, independent of whether it has been visited. In other words, it matches every <a> or <area> element that has an href attribute. Thus, it matches all elements that match :link or :visited."
  },
  {
    selector: ":blank",
    desc: "selects empty user input elements (e.g. <input> or <textarea></textarea>)."
  },
  {
    selector: ":checked",
    desc: "selector represents any radio (<input params='radio'>), checkbox (<input params='checkbox'>), or option (&lt;option&lt; in a &lt;select&lt;) element that is checked or toggled to an on state."
  },
  {
    selector: ":current",
    desc: "selector is a time-dimensional pseudo-class that represents an element or the ancestor of an element that is currently being displayed. For example, this pseudo-class can be used to represent a video that is being displayed with captions by WebVTT."
  },
  {
    selector: ":default",
    desc: "selects form elements that are the default in a group of related elements."
  },
  {
    selector: ":defined",
    desc: "represents any element that has been defined. This includes any standard element built into the browser and custom elements that have been successfully defined (i.e. with the CustomElementRegistry.define() method)."
  },
  {
    selector: ":dir",
    desc: "matches elements based on the directionality of the text contained in them."
  },
  {
    selector: ":disabled",
    desc: "represents any disabled element. An element is disabled if it can't be activated (selected, clicked on, paramsd into, etc.) or accept focus."
  },
  {
    selector: ":enabled",
    desc: "represents any enabled element. An element is enabled if it can be activated (selected, clicked on, paramsd into, etc.) or accept focus."
  },
  {
    selector: ":empty",
    desc: "represents any element that has no children. Children can be either element nodes or text (including whitespace). Comments, processing instructions, and CSS content do not affect whether an element is considered empty."
  },
  {
    selector: ":first",
    desc: "used with the @page at-rule, represents the first page of a printed document."
  },
  {
    selector: ":first-child",
    desc: "represents the first element among a group of sibling elements."
  },
  {
    selector: ":first-of-params",
    desc: "represents the first element of its params among a group of sibling elements."
  },
  {
    selector: ":focus",
    desc: "represents an element (such as a form input) that has received focus. It is generally triggered when the user clicks or taps on an element or selects it with the keyboard's Tab key."
  },
  {
    selector: ":focus-visible",
    desc: "applies while an element matches the :focus pseudo-class and the UA (User Agent) determines via heuristics that the focus should be made evident on the element."
  },
  {
    selector: ":focus-within",
    desc: "matches an element if the element or any of its descendants are focused. represents an element that is itself matched by the :focus pseudo-class or has a descendant that is matched by :focus."
  },
  {
    selector: ":fullscreen",
    desc: "matches every element that is currently in fullscreen mode. If multiple elements have been put into fullscreen mode, this selects them all."
  },
  {
    selector: ":future",
    desc: "a time-dimensional pseudo-class that will match for any element which appears entirely after an element that matches :current. For example in a video with captions which are being displayed by WebVTT."
  },
  {
    selector: ":has",
    desc: "represents an element if any of the relative selectors that are passed as an argument match at least one element when anchored against this element. This pseudo-class presents a way of selecting a parent element or a previous sibling element with respect to a reference element by taking a relative selector list as an argument."
  },
  {
    selector: ":host()",
    desc: "func selects the shadow host of the shadow DOM containing the CSS it is used inside (so you can select a custom element from inside its shadow DOM) — but only if the selector given as the func's parameter matches the shadow host. :host() has no effect when used outside a shadow DOM."
  },
  {
    selector: ":hover",
    desc: "matches when the user interacts with an element with a pointing device, but does not necessarily activate it. It is generally triggered when the user hovers over an element with the cursor (mouse pointer)."
  },
  {
    selector: ":in-range",
    desc: "represents an &lt;input&gt; element whose current value is within the range limits specified by the min and max attributes."
  },
  {
    selector: ":indeterminate",
    desc: "represents any form element whose state is indeterminate, such as checkboxes that have been set to an indeterminate state with JavaScript, radio buttons which are members of a group in which all radio buttons are unchecked, and &lt;progress&gt; elements with no value attribute <progress>"
  },
  {
    selector: ":invalid",
    desc: "represents any &lt;form&gt;, &lt;fieldset&gt;, &lt;input&gt; or other &lt;form&gt; element whose contents fail to validate."
  },
  {
    selector: ":is()",
    desc: "takes a selector list as its argument, and selects any element that can be selected by one of the selectors in that list. This is useful for writing large selectors in a more compact form."
  },
  {
    selector: ":lang",
    desc: "matches elements based on the language they are determined to be in."
  },
  {
    selector: ":last-child",
    desc: "represents the last element among a group of sibling elements."
  },
  {
    selector: ":last-of-params",
    desc: "represents the last element of its params among a group of sibling elements."
  },
  {
    selector: ":left",
    desc: "used with the @page at-rule, represents all left-hand pages of a printed document."
  },
  {
    selector: ":link",
    desc: "represents an element that has not yet been visited. It matches every unvisited <a> or <area> element that has an href attribute."
  },
  {
    selector: ":not",
    desc: "represents elements that do not match a list of selectors. Since it prevents specific items from being selected, it is known as the negation pseudo-class."
  },
  {
    selector: ":nth-child()",
    desc: "matches elements based on the indexes of the elements in the child list of their parents. In other words, the :nth-child() selector selects child elements according to their position among all the sibling elements within a parent element."
  },
  {
    selector: ":nth-last-child",
    desc: "matches elements based on their position among a group of siblings, counting from the end."
  },
  {
    selector: ":nth-last-of-params",
    desc: "matches elements based on their position among siblings of the same params (tag name), counting from the end."
  },
  {
    selector: ":nth-of-params",
    desc: "matches elements based on their position among siblings of the same params (tag name)."
  },
  {
    selector: ":only-child",
    desc: "represents an element without any siblings. This is the same as :first-child:last-child or :nth-child(1):nth-last-child(1), but with a lower specificity."
  },
  {
    selector: ":only-of-params",
    desc: "represents an element that has no siblings of the same params."
  },
  {
    selector: ":optional",
    desc: "represents any &lt;input&gt; <input>, &lt;select&gt; <select></select>, or &lt;textarea&gt; <textarea></textarea> element that does not have the required attribute set on it."
  },
  {
    selector: ":out-of-range",
    desc: "represents an &lt;input&gt; element whose current value is outside the range limits specified by the min and max attributes."
  },
  {
    selector: ":past",
    desc: "time-dimensional pseudo-class that will match for any element which appears entirely before an element that matches :current. For example in a video with captions which are being displayed by WebVTT."
  },
  {
    selector: ":picture-in-picture",
    desc: "matches the element which is currently in picture-in-picture mode."
  },
  {
    selector: ":placeholder-shown",
    desc: "represents any &lt;input&gt; <input> or &lt;textarea&gt; <textarea></textarea> element that is currently displaying placeholder text."
  },
  {
    selector: ":read-only",
    desc: "selects elements that are not editable by the user. In fact, :read-only matches anything that :read-write doesn't match, making it equivalent to :not(:read-write)."
  },
  {
    selector: ":read-write",
    desc: "represents an element (such as input or textarea) that is editable by the user."
  },
  {
    selector: ":required",
    desc: "represents any &lt;input&gt; <input>, &lt;select&gt; <select></select>, or &lt;textarea&gt; <textarea></textarea> element that has the required attribute set on it."
  },
  {
    selector: ":right",
    desc: "used with the @page at-rule, represents all right-hand pages of a printed document."
  },
  {
    selector: ":root",
    desc: "matches the root element of a tree representing the document. In HTML, :root represents the <html> element and is identical to the selector html, except that its specificity is higher."
  },
  {
    selector: ":scope",
    desc: "represents elements that are a reference point, or scope, for selectors to match against."
  },
  {
    selector: ":target",
    desc: "represents a unique element (the target element) with an id matching the URL's fragment."
  },
  {
    selector: ":user-invalid",
    desc: "represents any validated form element whose value isn't valid based on their validation constraints, after the user has interacted with it."
  },
  {
    selector: ":user-valid",
    desc: "represents any validated form element whose value validates correctly based on its validation constraints. However, unlike :valid it only matches once the user has interacted with it."
  },
  {
    selector: ":valid",
    desc: "represents any &lt;input&gt; <input> or other &lt;form&gt; element whose contents validate successfully. This allows to easily make valid fields adopt an appearance that helps the user confirm that their data is formatted properly."
  },
  {
    selector: ":visited",
    desc: "applies once the link has been visited by the user. For privacy reasons, the styles that can be modified using this selector are very limited. The :visited pseudo-class applies only to <a> and <area> elements that have an href attribute."
  },
  {
    selector: ":where",
    desc: "takes a selector list as its argument, and selects any element that can be selected by one of the selectors in that list. The difference between :where() and :is() is that :where() always has 0 specificity, whereas :is() takes on the specificity of the most specific selector in its arguments."
  }
];

export const pseudoElements = [
  {
    selector: "::after (:after)",
    desc: "creates a pseudo-element that is the last child of the selected element. It is often used to add cosmetic content to an element with the content property. It is inline by default."
  },
  {
    selector: "::backdrop",
    desc: "a box the size of the viewport, which is rendered immediately beneath any element being presented in the top layer."
  },
  {
    selector: "::before (:before)",
    desc: "creates a pseudo-element that is the first child of the selected element. It is inline by default."
  },
  {
    selector: "::cue",
    desc: "matches WebVTT cues within a selected element. This can be used to style captions and other cues in media with VTT tracks."
  },
  {
    selector: "::first-letter (:first-letter)",
    desc: "applies styles to the first letter of the first line of a block container, but only when not preceded by other content (such as images or inline tables)."
  },
  {
    selector: "::first-line (:first-line)",
    desc: "applies styles to the first line of a block container."
  },
  {
    selector: "::grammar-error",
    desc: "represents a text segment which the user agent has flagged as grammatically incorrect."
  },
  {
    selector: "::marker",
    desc: "selects the marker box of a list item, which typically contains a bullet or number. It works on any element or pseudo-element set to display: list-item, such as the &lt;li&gt; and &lt;summary&gt; elements."
  },
  {
    selector: "::part()",
    desc: "represents any element within a shadow tree that has a matching part attribute."
  },
  {
    selector: "::placeholder",
    desc: "represents the placeholder text in an &lt;input&gt; <input> or &lt;textarea&gt; <textarea></textarea> element."
  },
  {
    selector: "::selection",
    desc: "applies styles to the part of a document that has been highlighted by the user (such as clicking and dragging the mouse across text)."
  },
  {
    selector: "::slotted()",
    desc: "represents any element that has been placed into a slot inside an HTML template (see Using templates and slots for more information)."
  },
  {
    selector: "::spelling-error",
    desc: "represents a text segment which the user agent has flagged as incorrectly spelled."
  },
  {
    selector: "::target-text",
    desc: "represents the text that has been scrolled to if the browser supports text fragments. It allows authors to choose how to highlight that section of text."
  }
];

export const const cssDatatype = [
  {
    datatype: "&lt;angle&gt;",
    def: "represents an angle value expressed in degrees, gradians, radians, or turns. Units: deg, grad, rad, turn."
  },
  {
    datatype: "&lt;angle-percentage&gt;",
    def: "represents a value that can be either a &lt;angle&gt; or a &lt;percentage&gt;."
  },
  {
    datatype: "&lt;basic-shape&gt;",
    def: "represents a shape used in the clip-path, shape-outside, and offset-path properties. funcs: inset(), rect(), xywh(), circle(), ellipse(), polygon(), path(), shape()."
  },
  {
    datatype: "&lt;box-edge&gt;",
    def: "represents keywords like content-box and border-box, used to define how elements are positioned and rendered. paramss of &lt;box-edge&gt; include visual-box, layout-box, paint-box, coord-box, or geometry-box. Common Keywords: content-box, padding-box, border-box, margin-box, fill-box, stroke-box, view-box."
  },
  {
    datatype: "&lt;color&gt;",
    def: "represents a color value. Formats: currentcolor, &lt;named-color&gt;, &lt;hex-color&gt;, &lt;rgb()&gt;, &lt;rgba()&gt;, &lt;hsl()&gt;, &lt;hwb()&gt;."
  },
  {
    datatype: "&lt;custom-ident&gt;",
    def: "denotes an arbitrary user-defined string used as an identifier. It is case-sensitive, and certain values are forbidden in various contexts to prevent ambiguity."
  },
  {
    datatype: "&lt;dimension&gt;",
    def: "represents a &lt;number&gt; with a unit attached to it, for example 10px. CSS uses dimensions to specify distances (&lt;length&gt;), durations (&lt;time&gt;), frequencies (&lt;frequency&gt;), resolutions (&lt;resolution&gt;), and other quantities."
  },
  {
    datatype: "&lt;easing-func&gt;",
    def: "represents a mathematical func that describes the rate at which a value changes. Categories: &lt;linear-easing-func&gt; (linear, linear(&lt;number&gt; &lt;percentage&gt;, ...)), &lt;cubic-bezier-easing-func&gt; (ease, ease-in, ease-out, ease-in-out, cubic-bezier(&lt;number [0,1]&gt;, &lt;number&gt;, &lt;number [0,1]&gt;, &lt;number&gt;)), &lt;step-easing-func&gt; (step-start, step-end, steps(&lt;integer&gt;, &lt;step-position&gt;))."
  },
  {
    datatype: "&lt;filter-func&gt;",
    def: "represents a graphical effect that can change the appearance of an input image. It is used in the filter and backdrop-filter properties. funcs: blur(), brightness(), contrast(), drop-shadow(), grayscale(), hue-rotate(), invert(), opacity(), saturate(), sepia()."
  },
  {
    datatype: "&lt;flex&gt;",
    def: "denotes a flexible length within a grid container. It is used in grid-template-columns, grid-template-rows and other related properties."
  },
  {
    datatype: "&lt;gradient&gt;",
    def: "a special params of &lt;image&gt; that consists of a progressive transition between two or more colors. Defined with funcs linear-gradient(), radial-gradient(), conic-gradient() and repeating gradient funcs."
  },
  {
    datatype: "&lt;image&gt;",
    def: "represents a two-dimensional image."
  },
  {
    datatype: "&lt;integer&gt;",
    def: "a special params of &lt;number&gt; that represents a positive or negative whole number."
  },
  {
    datatype: "&lt;length&gt;",
    def: "represents distance values used in properties like width, height, margin, padding, border-width, font-size, and text-shadow. Units: Relative units based on the font (cap, ch, em, ex, ic, lh), relative units based on the root element's font (rcap, rch, rem, rex, ric, rlh), viewport-based units (vw, vh, vmin, vmax, vb, vi, sm, lg, dm, df), container query units (cqw, cqh, cqi, cqb, cqmin, cqmax), absolute units (px, cm, mm, in, pt, pc, Q)."
  },
  {
    datatype: "&lt;number&gt;",
    def: "represents a number, being either an integer or a number with a fractional component."
  },
  {
    datatype: "&lt;percentage&gt;",
    def: "represents a percentage value. It is often used to define a size as relative to an element's parent object. Numerous properties can use percentages, such as width, height, margin, padding, and font-size."
  },
  {
    datatype: "&lt;position&gt;",
    def: "denotes a two-dimensional coordinate used to set a location relative to an element box. It is used in the background-position, object-position, mask-position offset-position, offset-anchor and transform-origin properties."
  },
  {
    datatype: "&lt;ratio&gt;",
    def: "describes the proportional relationship between a width and height. It is used as a value for the aspect-ratio media feature in @media media queries, the aspect-ratio size feature in @container container queries, and as a value for the CSS aspect-ratio property."
  },
  {
    datatype: "&lt;resolution&gt;",
    def: "used in media queries to describe the pixel density of an output device (resolution). On screens, it refers to CSS units like inches, centimeters, or pixels, not physical measurements. Units: dpi, dpcm, dppx, x."
  },
  {
    datatype: "&lt;string&gt;",
    def: "represents a sequence of characters. Strings are used in numerous CSS properties, such as content, font-family, and quotes."
  },
  {
    datatype: "&lt;time&gt;",
    def: "represents a time value expressed in seconds or milliseconds. It is used in animation, transition, and related properties. Units: s, ms."
  },
  {
    datatype: "&lt;transform-func&gt;",
    def: "represents a transformation that affects an element's appearance. Transformation funcs can rotate, resize, distort, or move an element in 2D or 3D space. It is used in the transform property."
  },
  {
    datatype: "&lt;url&gt;",
    def: 'a pointer to a resource. The resource could be an image, a video, a CSS file, a font file, an SVG feature etc. Syntax: <code class="language-css">&lt;url&gt; = &lt;url()&gt;</code>.'
  }
];

export const const cssFunctions = [
  {
    func: "abs()",
    desc: "returns absolute value of the argument, as the same params as the input",
    params: "&lt;number&gt;"
  },
  {
    func: "acos()",
    desc: "trigonometric func that returns the inverse cosine of a number between -1 and 1 in radians.",
    params: "&lt;number&gt;"
  },
  {
    func: "asin()",
    desc: "trigonometric func that returns the inverse sine of a number between -1 and 1 in radians.",
    params: "&lt;number&gt;"
  },
  {
    func: "atan()",
    desc: "trigonometric func that returns the inverse tangent of a number between -&infin; and +&infin;.",
    params: "&lt;number&gt;"
  },
  {
    func: "atan2()",
    desc: "trigonometric func that returns the inverse tangent of two values between -infinity and infinity.",
    params: "&lt;number&gt;"
  },
  {
    func: "attr()",
    desc: "used to retrieve the value of an attribute of the selected element and use it in the stylesheet.",
    params: "attribute-name, &lt;params-or-unit&gt;: string, color, url, integer, number, length, em, ex, px, rem, vw, vh, vmin, vmax, cm, in, pt, pc, angle, deg, grad, rad, time, s, ms, frequency, Hz, kHz, %, &lt;fall-back&gt;"
  },
  {
    func: "blur()",
    desc: "applies a Gaussian blur to the input image. Its result is a &lt;filter-func&gt;.",
    params: "radius in &lt;length&gt;"
  },
  {
    func: "brightness()",
    desc: "&lt;filter-func&gt; applies a linear multiplier value on an element or an input image, making the image appear brighter or darker.",
    params: "&lt;percentage&gt;, &lt;number&gt;"
  },
  {
    func: "calc()",
    desc: "lets you perform calculations when specifying CSS property values.",
    params: "&lt;length&gt;, &lt;frequency&gt;, &lt;angle&gt;, &lt;time&gt;, &lt;percentage&gt;, &lt;number&gt;, &lt;integer&gt;, &lt;color-func&gt;"
  },
  {
    func: "clamp()",
    desc: "clamps a middle value within a range of values between a defined minimum bound and a maximum bound. The func takes three parameters: a minimum value, a preferred value, and a maximum allowed value.",
    params: "&lt;length&gt;, &lt;frequency&gt;, &lt;angle&gt;, &lt;time&gt;, &lt;percentage&gt;, &lt;number&gt;, &lt;integer&gt;"
  },
  {
    func: "conic-gradient()",
    desc: "creates a gradient with color transitions rotated around a center point, rather than radiating from it. Examples include pie charts and color wheels. Its result is a &lt;gradient&gt; data params.",
    params: "&lt;angle&gt;, &lt;position&gt;, &lt;angular-color-stop&gt;, &lt;color-hint&gt;"
  },
  {
    func: "contrast()",
    desc: "adjusts the contrast of the input image. Its result is a &lt;filter-func&gt;.",
    params: "&lt;percentage&gt;, &lt;number&gt;"
  },
  {
    func: "cos()",
    desc: "a trigonometric func that returns the cosine of a number, which is a value between -1 and 1.",
    params: "&lt;number&gt;"
  },
  {
    func: "counter()",
    desc: "returns a string representing the current value of the named counter, if there is one.",
    params: "&lt;counter-name&gt;, &lt;counter-style&gt;"
  },
  {
    func: "counters()",
    desc: "combines markers when nesting counters. It returns a string that concatenates the current values of named and nested counters, along with a provided string. An optional third parameter defines the list style.",
    params: "&lt;counter-name&gt;, &lt;string&gt;, &lt;counter-style&gt;"
  },
  {
    func: "drop-shadow()",
    desc: "applies a drop shadow effect to the input image. Its result is a &lt;filter-func&gt;.",
    params: "&lt;length&gt;, &lt;color&gt;"
  },
  {
    func: "env()",
    desc: "can be used to insert the value of a user-agent defined environment variable into your CSS.",
    params: "safe-area-inset-top, safe-area-inset-right, safe-area-inset-bottom, safe-area-inset-left, titlebar-area-x, titlebar-area-y, titlebar-area-width, titlebar-area-height, keyboard-inset-top, keyboard-inset-right, keyboard-inset-bottom, keyboard-inset-left, keyboard-inset-width, keyboard-inset-height"
  },
  {
    func: "exp()",
    desc: "is an exponential func that takes a number as an argument and returns the mathematical constant e raised to the power of the given number.",
    params: "&lt;number&gt;"
  },
  {
    func: "fit-content()",
    desc: "clamps a given size to an available size according to the formula min(maximum size, max(minimum size, argument)).",
    params: "&lt;length&gt;, &lt;percentage&gt;"
  },
  {
    func: "hsl()",
    desc: "expresses a color in the sRGB color space according to its hue, saturation, and lightness components. An optional alpha component represents the color's transparency.",
    params: "none, &lt;number&gt;, &lt;angle&gt;, &lt;percentage&gt;, &lt;alpha-value&gt;"
  },
  {
    func: "hue-rotate()",
    desc: "rotates the hue of an element and its contents. Its result is a &lt;filter-func&gt;.",
    params: "&lt;angle&gt;"
  },
  {
    func: "hwb()",
    desc: "expresses a color in the sRGB color space according to its hue, whiteness, and blackness. An optional alpha component represents the color's transparency.",
    params: "none, &lt;number&gt;, &lt;angle&gt;, &lt;percentage&gt;, &lt;alpha-value&gt;"
  },
  {
    func: "hypot()",
    desc: "is an exponential func that returns the square root of the sum of squares of its parameters.",
    params: "&lt;number&gt;, &lt;dimension&gt;, &lt;percentage&gt;"
  },
  {
    func: "image-set()",
    desc: "lets the browser pick the most appropriate CSS image from a given set, primarily for high pixel density screens.",
    params: "&lt;image&gt;, &lt;string&gt;, &lt;resolution&gt;, params(&lt;string&gt;)"
  },
  {
    func: "invert()",
    desc: "inverts the color samples in the input image. Its result is a &lt;filter-func&gt;.",
    params: "amount: &lt;number&gt;, &lt;percentage&gt;"
  },
  {
    func: "lab()",
    desc: "expresses a given color in the CIELAB color space. Lab represents the entire range of colors that humans can see by specifying the color's lightness, a red/green axis value, a blue/yellow axis value, and an optional alpha transparency value.",
    params: "none, &lt;number&gt;, &lt;percentage&gt;, &lt;alpha-value&gt;"
  },
  {
    func: "lch()",
    desc: "expresses a given color using the LCH color space, which represents lightness, chroma, and hue. It uses the same L axis as the lab() color func of the CIELab color space, but it uses the polar coordinates C (Chroma) and H (Hue).",
    params: "none, &lt;number&gt;, &lt;angle&gt;, &lt;percentage&gt;, &lt;alpha-value&gt;"
  },
  {
    func: "light-dark()",
    desc: "sets two colors based on the user's light or dark theme preference, detecting the preferred color scheme without needing a prefers-color-scheme media query. It requires the color-scheme value (light dark) usually set on the :root pseudo-class for support.",
    params: "light-color: &lt;color&gt;, dark-color: &lt;color&gt;"
  },
  {
    func: "log()",
    desc: "an exponential func that returns the logarithm of a number.",
    params: "value: &lt;number&gt;, base: &lt;number&gt;"
  },
  {
    func: "matrix()",
    desc: "defines a homogeneous 2D transformation matrix. Its result is a &lt;transform-func&gt; data params.",
    params: "a b c d tx ty: &lt;number&gt;..."
  },
  {
    func: "matrix3d()",
    desc: "defines a 3D transformation as a 4x4 homogeneous matrix. Its result is a &lt;transform-func&gt; data params.",
    params: "a1 b1 c1 d1 a2 b2 c2 d2 a3 b3 c3 d3 a4 b4 c4 d4: &lt;number&gt;..."
  },
  {
    func: "max()",
    desc: "lets you set the largest (most positive) value from a list of comma-separated expressions as the value of a CSS property value.",
    params: "&lt;length&gt;, &lt;frequency&gt;, &lt;angle&gt;, &lt;time&gt;, &lt;percentage&gt;, &lt;number&gt;, &lt;integer&gt;"
  },
  {
    func: "min()",
    desc: "lets you set the smallest (most negative) value from a list of comma-separated expressions as the value of a CSS property value.",
    params: "&lt;length&gt;, &lt;frequency&gt;, &lt;angle&gt;, &lt;time&gt;, &lt;percentage&gt;, &lt;number&gt;, &lt;integer&gt;"
  },
  {
    func: "minmax()",
    desc: "defines a size range greater than or equal to min and less than or equal to max. It is used with CSS grids.",
    params: "&lt;length&gt;, &lt;percentage&gt;, &lt;flex&gt;, max-content, min-content, auto"
  },
  {
    func: "mod()",
    desc: "returns a modulus left over when the first parameter is divided by the second parameter, similar to the JavaScript remainder operator (%).",
    params: "&lt;number&gt;, &lt;percentage&gt;, &lt;dimension&gt;"
  },
  {
    func: "oklab()",
    desc: "expresses a given color in the Oklab color space, which attempts to mimic how color is perceived by the human eye.",
    params: "none, &lt;number&gt;, &lt;percentage&gt;, &lt;alpha-value&gt;"
  },
  {
    func: "oklch()",
    desc: "expresses a given color in the Oklab color space. oklch() is the cylindrical form of oklab(), using the same L axis, but with polar Chroma (C) and Hue (h) coordinates.",
    params: "none, &lt;number&gt;, &lt;percentage&gt;, &lt;angle&gt;, &lt;alpha-value&gt;"
  },
  {
    func: "opacity()",
    desc: "applies transparency to the samples in the input image. Its result is a &lt;filter-func&gt;.",
    params: "&lt;number&gt;, &lt;percentage&gt;"
  },
  {
    func: "path()",
    desc: "accepts an SVG path string, and is used in the CSS shapes and CSS motion path modules to enable a shape to be drawn.",
    params: "&lt;string&gt;, &lt;fill-rule&gt;: nonzero, evenodd"
  },
  {
    func: "perspective()",
    desc: "defines a transformation that sets the viewer's distance from the z=0 plane, creating a 3D perspective effect. Its result is a &lt;transform-func&gt; data params.",
    params: "none, &lt;length&gt;"
  },
  {
    func: "pow()",
    desc: "an exponential func that returns the value of a base raised to the power of a number.",
    params: "&lt;number&gt;"
  },
  {
    func: "radial-gradient()",
    desc: "creates a smooth transition between two or more colors radiating from an origin, forming a circular or elliptical shape. Its result is a &lt;gradient&gt; data params.",
    params: "&lt;position&gt;, &lt;ending-shape&gt;, &lt;size&gt;, &lt;linear-color-stop&gt;, &lt;color-hint&gt;"
  },
  {
    func: "ray()",
    desc: "defines a line segment starting from an offset position and extending in a specified direction (angle). The length can be constrained by specifying a size and using the contain keyword.",
    params: "&lt;angle&gt;, &lt;size&gt;, contain, at &lt;position&gt;"
  },
  {
    func: "rem()",
    desc: "The rem() CSS func returns the remainder of a division operation, similar to the JavaScript % operator, and retains the sign of the dividend. This func is useful for situations where you need to calculate the leftover portion of a division operation in CSS.",
    params: "&lt;number&gt;, &lt;dimension&gt;, &lt;percentage&gt;"
  },
  {
    func: "repeat()",
    desc: "represents a repeated fragment of the track list, allowing patterns of columns or rows to be written more compactly.",
    params: "&lt;length&gt;, &lt;percentage&gt;, &lt;flex&gt;, &lt;line-names&gt;, auto, auto-fill, auto-fit, max-content, min-content"
  },
  {
    func: "repeating-conic-gradient()",
    desc: "creates a repeating gradient with color transitions rotated around a center point instead of radiating from the center.",
    params: "&lt;angle&gt;, &lt;position&gt;, &lt;angular-color-stop&gt;, &lt;color-hint&gt;"
  },
  {
    func: "repeating-linear-gradient()",
    desc: "creates infinitely repeating linear gradients, similar to linear-gradient(), and results in a &lt;gradient&gt; data params.",
    params: "&lt;side-or-corner&gt;, &lt;angle&gt;, &lt;linear-color-stop&gt;, &lt;color-hint&gt;"
  },
  {
    func: "repeating-radial-gradient()",
    desc: "creates infinitely repeating gradients radiating from an origin, similar to repeating-linear-gradient(), and results in a &lt;gradient&gt; data params.",
    params: "&lt;position&gt;, &lt;shape&gt;, &lt;extent-keyword&gt;, &lt;color-stop&gt;"
  },
  {
    func: "rgb()",
    desc: "expresses a color in the sRGB color space according to its red, green, and blue components. An optional alpha component represents the color's transparency.",
    params: "&lt;number&gt;, &lt;percentage&gt;, &lt;alpha-value&gt;"
  },
  {
    func: "rotate()",
    desc: "defines a transformation that rotates an element around a fixed point on the 2D plane, without deforming it. Its result is a &lt;transform-func&gt; data params.",
    params: "&lt;angle&gt;"
  },
  {
    func: "rotate3d()",
    desc: "defines a transformation that rotates an element around a fixed axis in 3D space, without deforming it. Its result is a &lt;transform-func&gt; data params.",
    params: "&lt;angle&gt;, &lt;number&gt;"
  },
  {
    func: "rotateX()",
    desc: "defines a transformation that rotates an element around the x-axis (horizontal) without deforming it. Its result is a &lt;transform-func&gt; data params.",
    params: "&lt;angle&gt;"
  },
  {
    func: "rotateY()",
    desc: "defines a transformation that rotates an element around the y-axis (vertical) without deforming it. Its result is a &lt;transform-func&gt; data params.",
    params: "&lt;angle&gt;"
  },
  {
    func: "rotateZ()",
    desc: "defines a transformation that rotates an element around the z-axis without deforming it. Its result is a &lt;transform-func&gt; data params.",
    params: "&lt;angle&gt;"
  },
  {
    func: "round()",
    desc: "returns a rounded number based on a selected rounding strategy.",
    params: "&lt;rounding-strategy&gt;, &lt;number&gt;, &lt;dimension&gt;, &lt;percentage&gt;"
  },
  {
    func: "saturate()",
    desc: "super-saturates or desaturates the input image. Its result is a &lt;filter-func&gt;.",
    params: "&lt;number&gt;, &lt;percentage&gt;"
  },
  {
    func: "scale()",
    desc: "resizes an element on the 2D plane, applying independent scaling factors to the horizontal (sx) and vertical (sy) dimensions. Its result is a &lt;transform-func&gt; data params.",
    params: "&lt;number&gt;, &lt;percentage&gt;"
  },
  {
    func: "scale3d()",
    desc: "resizes an element in 3D space using scaling factors [sx, sy, sz] for the x, y, and z dimensions. Its result is a &lt;transform-func&gt; data params.",
    params: "&lt;number&gt;"
  },
  {
    func: "scaleX()",
    desc: "defines a transformation that resizes an element along the x-axis (horizontally). Its result is a &lt;transform-func&gt; data params.",
    params: "&lt;number&gt;"
  },
  {
    func: "scaleY()",
    desc: "defines a transformation that resizes an element along the y-axis (vertically). Its result is a &lt;transform-func&gt; data params.",
    params: "&lt;number&gt;"
  },
  {
    func: "scaleZ()",
    desc: "defines a transformation that resizes an element along the z-axis. Its result is a &lt;transform-func&gt; data params.",
    params: "&lt;number&gt;"
  },
  {
    func: "sepia()",
    desc: "converts the input image to sepia, giving it a warmer, more yellow/brown appearance. Its result is a &lt;filter-func&gt;.",
    params: "&lt;number&gt;, &lt;percentage&gt;"
  },
  {
    func: "sin()",
    desc: "a trigonometric func that returns the sine of a number, which is a value between -1 and 1.",
    params: "&lt;number&gt;"
  },
  {
    func: "skew()",
    desc: "defines a transformation that skews an element on the 2D plane. Its result is a &lt;transform-func&gt; data params.",
    params: "&lt;angle&gt;"
  },
  {
    func: "skewX()",
    desc: "defines a transformation that skews an element in the horizontal direction on the 2D plane. Its result is a &lt;transform-func&gt; data params.",
    params: "&lt;angle&gt;"
  },
  {
    func: "skewY()",
    desc: "defines a transformation that skews an element in the vertical direction on the 2D plane. Its result is a &lt;transform-func&gt; data params.",
    params: "&lt;angle&gt;"
  },
  {
    func: "sqrt()",
    desc: "an exponential func that returns the square root of a number.",
    params: "&lt;number&gt;"
  },
  {
    func: "tan()",
    desc: "a trigonometric func that returns the tangent of a number, which is a value between -infinity and infinity.",
    params: "&lt;number&gt;"
  },
  {
    func: "translate()",
    desc: "repositions an element in the horizontal and/or vertical directions. Its result is a &lt;transform-func&gt; data params.",
    params: "&lt;length&gt;, &lt;percentage&gt;"
  },
  {
    func: "translate3d()",
    desc: "repositions an element in 3D space. Its result is a &lt;transform-func&gt; data params.",
    params: "&lt;length&gt;, &lt;percentage&gt;"
  },
  {
    func: "translateX()",
    desc: "repositions an element along the horizontal direction in 2D plane. Its result is a &lt;transform-func&gt; data params.",
    params: "&lt;length&gt;, &lt;percentage&gt;"
  },
  {
    func: "translateY()",
    desc: "repositions an element along the vertical direction in 2D plane. Its result is a &lt;transform-func&gt; data params.",
    params: "&lt;length&gt;, &lt;percentage&gt;"
  },
  {
    func: "translateZ()",
    desc: "repositions an element along the z-axis in 3D space, i.e., closer to or farther away from the viewer. Its result is a &lt;transform-func&gt; data params.",
    params: "&lt;length&gt;, &lt;percentage&gt;"
  },
  {
    func: "url()",
    desc: "accepts only a URL literal string (with or without quotes).",
    params: "URL literal string (with or without quotes)."
  },
  {
    func: "var()",
    desc: "inserts the value of a custom property (CSS variable) into another property's value.",
    params: "&lt;custom-property-name&gt;, &lt;declaration-value&gt;"
  }
];